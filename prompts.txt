New Feature-
1:
this is the list_view.html:
<html>
  <head>
    <title>Link View</title>
    <link rel="stylesheet" type="text/css" href="../../css/pages/list_view.css" />
    <script type="text/javascript" src="../../scripts/script.js"></script>
  </head>
  <body>
  <h2>Link View</h2>
	<a href="../open_view.html"><button class="button">Home Page</button></a>
  <div class="container">
    <h1>Tasks! :D</h1>
    <button id="show-tasks">Show me my tasks</button>
    <button> Sort by Deadline</button>
    <button> Sort Alphabetically</button>
    <button id="clear-tasks"> Clear</button>
    <div id="taskContainer"></div>
</div>

<script src="../../scripts/task.js"></script>
  
</body>
</html>
this is the script.js:
//TO-DO: Get DOM elements. Also figure out how that works.
//TO-DO: Implement Event Listener Functions. Should detect when "add" button confirmation is clicked, and add task in response.
//TO-DO: Implement renderTask function. This can be split into several functions. This should display a calendar view of tasks, and a list view.

// let dynamicTaskArray = new Array; //REMOVE AFTER TESTING. localStorage doesn't work in VS code, only in browser!

console.log("script!");

document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('submit-task-button')?.addEventListener('click', function(event) {
        addTask(event);
    });

    document.getElementById('show-tasks')?.addEventListener('click', function(event) {
        event.preventDefault();
        generateTasks(dynamicTaskArray.length);
    });

    document.getElementById('clear-tasks')?.addEventListener('click', function(event) {
        event.preventDefault();
        generateTasks(0);
    });
});

function addTask(event) {
    event.preventDefault();
    const form = document.getElementById('myForm');

    const formData = new FormData(form);
  
    // Access individual form values
    const taskName = formData.get('task-name');
    const taskDesc = formData.get('task-desc'); 
    const taskDate = formData.get('task-date');
    const taskRecur = formData.get('task-recur'); 

    const task = createTask(taskName, taskDesc, 'None', taskDate, false, false);

    console.log(task.taskName);
    console.log(task.taskDescription);
    console.log(task.taskCategory);
    console.log(task.date);
    console.log(task.complete);
    console.log(task.recurring);
    saveTasksToLocalStorage();
    
    form.submit();
}

let dynamicTaskArray = loadTaskInLocalStorage(); //UNCOMMENT AFTER TESTING

/**
 * Function that saves the current list of tasks (implemented as dynamic array) to local storage.
 */
function saveTasksToLocalStorage()
{
    let saveTasks = JSON.stringify(dynamicTaskArray);
    localStorage.setItem("tasks", saveTasks);
}

/**
 * Function that loads the last saved list of tasks (implemented as dynamic array) from local storage.
 * @returns Dynamic Array containing tasks
 */
function loadTaskInLocalStorage()
{
    let loadTask = localStorage.getItem("tasks"); //"tasks" can be changed. Just keep consistency with saveTasksInLocalStorage().

    if (loadTask==null)
    {
        console.log("Figure out what to do with null task list");
        return new Array; //Not sure if syntax is correct. Test later
    }
    else
    {
        console.log("task list exists");
        return JSON.parse(loadTask);
    }
}


/**
 * Creates Task Object.
 * @param {*} taskName 
 * @param {*} taskDescription 
 * @param {*} taskCategory 
 * @param {*} date 
 * @param {*} complete 
 * @param {*} recurring 
 * @returns 
 */
function createTask(taskName, taskDescription, taskCategory, date, complete, recurring) {
    return {taskName: taskName, taskDescription: taskDescription, taskCategory: taskCategory, date: date, complete: complete, recurring: recurring}
}

/**
 * Function that uses removes the element at given index. Also honestly may change how this works later. Prototype.
 * @param {*} index Index of array element that needs to be erased.
 */
function deleteTask(index)
{
    dynamicTaskArray.splice(index,1);
    saveTasksToLocalStorage();
}

//IGNORE: TESTING CODE BELOW
dynamicTaskArray.push(6);
localStorage.setItem('my-array', JSON.stringify(dynamicTaskArray));
const myArray = JSON.parse(localStorage.getItem('my-array'));
console.log(myArray);

//console.log(dynamicTaskArray);
    
//const poly1 = new Polygon();

const date1 = new Date(2024, 11, 24, 10);
const task = new createTask("Task1", "First task of list", "None", date1, false, false);

console.log(task.taskName)
console.log(task.taskDescription)
console.log(task.taskCategory)
console.log(task.date)
console.log(task.complete)
console.log(task.recurring)
//console.log(date1)
//console.log(poly1.name);
//console.log(Task Object: ${date1.getDate});

function generateTasks(taskNumber) {
    const taskContainer = document.getElementById('taskContainer');

    // clear previous tasks
    taskContainer.innerHTML = '';

    for (let i = 1; i <= taskNumber; i++) {
        const taskDiv = document.createElement('div');
        taskDiv.className = 'task';

        const taskLabel = document.createElement('label');
        taskLabel.textContent = Example Task ${i}: ;
        taskLabel.className = 'taskLabel';

        const deadline = document.createElement('label');
        deadline.textContent = 'Deadline: ';
        deadline.className = 'taskLabel';
        


        taskDiv.appendChild(taskLabel);
        taskDiv.appendChild(deadline);

        taskContainer.appendChild(taskDiv);

    }
    console.log("Tasks succesfully shown.");
}
Could you rewrite the generateTasks to take the stored array values and display them?


2:
this is the current output on the list view: 
"Task 1: undefined
Description: undefined

Due Date: undefined

Completed: No"
Could you provide code that would fix this?


3:
This is the error that I got after reinstalling the extension and trying to add a new task.
script.js:125 Uncaught TypeError: Cannot set properties of null (setting 'innerHTML')
    at generateTasks (script.js:125:29)
    at addTask (script.js:47:5)
    at HTMLButtonElement.<anonymous> (script.js:11:9)


4:
with the changes made, this is the current error message:
"taskContainer element not found.
generateTasks	@	script.js:126
addTask	@	script.js:47
(anonymous)	@	script.js:11"


5:
This was the console output after doing all of your changes: 
"DOM fully loaded and parsed
script.js:17 taskContainer element not found."
It seems that there is an issue with trying to access the taskContainer element from the opening page when that html is in a separate linked page from where the tasks are inputted. It seems that this issue might be fixed if tasks aren't regenerated upon creating a new task.

Testing-
1. I want to return to the work on the task list view. Could you write a couple test cases to run for the code you provided?

2. I added these three functions and calls into a test.js like so:
"function testAddAndDisplayTask() {
    // Clear local storage before running the test
    localStorage.clear();

    // Manually add a task to the array and localStorage
    let testTask = createTask("Test Task", "This is a test task", "General", "2024-11-15", false, false);
    dynamicTaskArray.push(testTask);
    saveTasksToLocalStorage();

    // Simulate the task generation in the task view
    generateTasks();

    // Check if the taskContainer has the correct content
    const taskContainer = document.getElementById('taskContainer');
    const firstTask = taskContainer.firstChild;

    console.assert(firstTask !== null, "No task found in task container.");
    console.assert(firstTask.querySelector('.taskLabel').textContent.includes("Test Task"), "Task name not displayed correctly.");
    console.assert(firstTask.querySelectorAll('label')[1].textContent.includes("2024-11-15"), "Task date not displayed correctly.");

    console.log("Test Add and Display Task: Passed");
}

// Run the test
testAddAndDisplayTask();

function testClearTasks() {
    // Manually add a few tasks to the dynamicTaskArray
    dynamicTaskArray = [
        createTask("Task 1", "Description 1", "None", "2024-12-12", false, false),
        createTask("Task 2", "Description 2", "None", "2024-12-13", false, false)
    ];
    saveTasksToLocalStorage();

    // Simulate displaying tasks
    generateTasks();

    // Now simulate clearing tasks
    generateTasks(0);

    // Check if the task container is empty
    const taskContainer = document.getElementById('taskContainer');
    console.assert(taskContainer.innerHTML === '', "Task container should be empty after clearing tasks.");

    console.log("Test Clear Tasks: Passed");
}

// Run the test
testClearTasks();

function testLoadTasksFromLocalStorage() {
    // Clear localStorage before the test
    localStorage.clear();

    // Add a task directly into localStorage
    let taskList = [
        createTask("Loaded Task 1", "Loaded description 1", "None", "2024-10-30", false, false)
    ];
    localStorage.setItem("tasks", JSON.stringify(taskList));

    // Simulate loading tasks from localStorage and displaying them
    dynamicTaskArray = loadTaskInLocalStorage();
    generateTasks();

    // Check if the task was loaded correctly
    const taskContainer = document.getElementById('taskContainer');
    const firstTask = taskContainer.firstChild;

    console.assert(firstTask !== null, "No task found after loading from localStorage.");
    console.assert(firstTask.querySelector('.taskLabel').textContent.includes("Loaded Task 1"), "Loaded task name not displayed correctly.");
    console.assert(firstTask.querySelectorAll('label')[1].textContent.includes("2024-10-30"), "Loaded task date not displayed correctly.");

    console.log("Test Load Tasks from Local Storage: Passed");
}

// Run the test
testLoadTasksFromLocalStorage(); "

and added two extra src references in list_view.html like so:
"<html>
  <head>
    <title>Link View</title>
    <link rel="stylesheet" type="text/css" href="../../css/pages/list_view.css" />
  </head>
  <body>
    <h2>Link View</h2>
    <a href="../open_view.html"><button class="button">Home Page</button></a>
    <div class="container">
      <h1>Tasks! :D</h1>
      <button id="show-tasks">Show me my tasks</button>
      <button>Sort by Deadline</button>
      <button>Sort Alphabetically</button>
      <button id="clear-tasks">Clear</button>
      <div id="taskContainer"></div> <!-- Ensure taskContainer exists -->
    </div>

    <!-- Move script to the bottom of body -->
    <script src="../../scripts/task.js"></script>
    <script src="../../scripts/script.js"></script>
    <script src="../../scripts/tests.js"></script>
  </body>
</html> "

When I now navigate to the list_view page I get this error on the console:
"tests.js:18 Uncaught TypeError: Cannot read properties of null (reading 'textContent')
    at testAddAndDisplayTask (tests.js:18:57)
    at tests.js:25:1"

Am I not setting up the testing code to run correctly? what might be done to fix this error?

3. I implemented the changes you provided, but got the same error message. It seem that the line 
console.assert(firstTask.querySelector('.taskLabel').textContent.includes("Test Task"), "Task name not displayed correctly.");
is causing the error. Can you fix this?

4. this is the full console readout upon traversing to the list_view.html page:
DOM fully loaded and parsed
task.js:7 taskContainer found
script.js:2 DOM fully loaded and parsed
tests.js:27 <div class=​"task">​…​</div>​
tests.js:31 Assertion failed: Task label element not found.
testAddAndDisplayTask @ tests.js:31
(anonymous) @ tests.js:3
tests.js:45 Test Add and Display Task: Passed
tests.js:65 Assertion failed: Task container should be empty after clearing tasks.
testClearTasks @ tests.js:65
(anonymous) @ tests.js:4
tests.js:67 Test Clear Tasks: Passed
tests.js:89 Uncaught TypeError: Cannot read properties of null (reading 'textContent')
    at testLoadTasksFromLocalStorage (tests.js:89:57)
    at HTMLDocument.<anonymous> (tests.js:5:5)
can you figure out a solution?

5. with all of those changes made, this is the current console readout upon clicking over to the list_view page:
"DOM fully loaded and parsed
task.js:7 taskContainer found
script.js:2 DOM fully loaded and parsed
task.js:60 Tasks successfully shown.
tests.js:27 <div class=​"task">​…​</div>​
tests.js:34 Assertion failed: Task name not displayed correctly.
testAddAndDisplayTask @ tests.js:34
(anonymous) @ tests.js:3
tests.js:42 Assertion failed: Task description not displayed correctly.
testAddAndDisplayTask @ tests.js:42
(anonymous) @ tests.js:3
tests.js:50 Assertion failed: Task date not displayed correctly.
testAddAndDisplayTask @ tests.js:50
(anonymous) @ tests.js:3
tests.js:61 Test Add and Display Task: Passed
task.js:60 Tasks successfully shown.
task.js:60 Tasks successfully shown.
tests.js:82 Assertion failed: Task container should be empty after clearing tasks.
testClearTasks @ tests.js:82
(anonymous) @ tests.js:4
tests.js:84 Test Clear Tasks: Passed
task.js:60 Tasks successfully shown.
tests.js:107 Assertion failed: Loaded task date not displayed correctly.
testLoadTasksFromLocalStorage @ tests.js:107
(anonymous) @ tests.js:5
tests.js:109 Test Load Tasks from Local Storage: Passed"
How should the code be changed to fix this?

6. The code you wrote is identical to what I already have, also it seems that the test code will 
indicate that the test passes at the end of the test whether or not it actually passes. Is it possible, 
that the problem might be due to the tests running one after another or is the formatting incorrect for 
the asserts? the list view does appear to look correct visually, so I would guess that the tests are not 
either running correctly, or that the formatting is off.

7. This is the current output of the console with those changes:
"DOM fully loaded and parsed
task.js:7 taskContainer found
script.js:2 DOM fully loaded and parsed
task.js:60 Tasks successfully shown.
task.js:60 Tasks successfully shown.
task.js:60 Tasks successfully shown.
tests.js:10 Uncaught Error: Task container should be empty after clearing tasks.
    at assert (tests.js:10:15)
    at testClearTasks (tests.js:58:5)
    at HTMLDocument.<anonymous> (tests.js:4:5)
assert @ tests.js:10
testClearTasks @ tests.js:58
(anonymous) @ tests.js:4
tests.js:10 Uncaught Error: Task name not displayed correctly.
    at assert (tests.js:10:15)
    at tests.js:32:9
assert @ tests.js:10
(anonymous) @ tests.js:32
setTimeout
testAddAndDisplayTask @ tests.js:27
(anonymous) @ tests.js:3"
It appears to fail due to incorrectly calling generateTasks(0); instead of clearTasks();.
here is the task.js code that is being called on:
Javascript
document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM fully loaded and parsed");

    // Check if taskContainer exists (only on list view page)
    const taskContainer = document.getElementById('taskContainer');
    if (taskContainer) {
        console.log("taskContainer found");

        // Attach event listener to show tasks
        document.getElementById('show-tasks')?.addEventListener('click', function(event) {
            event.preventDefault();
            generateTasks();  // Call generateTasks to show stored tasks
        });

        document.getElementById('clear-tasks')?.addEventListener('click', function(event) {
            event.preventDefault();
            clearTasks();
        });
    }
});

function generateTasks() {
    const taskContainer = document.getElementById('taskContainer');

    // Clear previous tasks
    taskContainer.innerHTML = '';

    // Loop through dynamicTaskArray to create task elements
    dynamicTaskArray.forEach(task => {
        const taskDiv = document.createElement('div');
        taskDiv.className = 'task';

        // Create a label for the task name
        const taskLabel = document.createElement('label');
        taskLabel.textContent = `Task: ${task.taskName}`;
        taskLabel.className = 'taskLabel'; // Ensure this class is set

        // Create a label for the task description
        const descLabel = document.createElement('label');
        descLabel.textContent = `Description: ${task.taskDescription}`;
        
        // Create a label for the task due date
        const dateLabel = document.createElement('label');
        dateLabel.textContent = `Due Date: ${task.date}`;

        // Create a label for the completion status
        const completeLabel = document.createElement('label');
        completeLabel.textContent = `Completed: ${task.complete ? 'Yes' : 'No'}`;

        // Append labels to the taskDiv
        taskDiv.appendChild(taskLabel);
        taskDiv.appendChild(descLabel);
        taskDiv.appendChild(dateLabel);
        taskDiv.appendChild(completeLabel);

        // Append the taskDiv to the taskContainer
        taskContainer.appendChild(taskDiv);
    });

    console.log("Tasks successfully shown.");
}


function loadTaskInLocalStorage() {
    let loadTask = localStorage.getItem("tasks");
    return loadTask ? JSON.parse(loadTask) : [];
}

function clearTasks() {
    const taskContainer = document.getElementById('taskContainer');
    taskContainer.innerHTML = '';
}

8. After implementing your changes, this was the readout of the console:
"DOM fully loaded and parsed
task.js:7 taskContainer found
script.js:2 DOM fully loaded and parsed
task.js:60 Tasks successfully shown.
task.js:60 Tasks successfully shown.
task.js:60 Tasks successfully shown.
tests.js:10 Uncaught Error: Loaded task date not displayed correctly.
    at assert (tests.js:10:15)
    at testLoadTasksFromLocalStorage (tests.js:91:5)
    at HTMLDocument.<anonymous> (tests.js:5:5)
assert @ tests.js:10
testLoadTasksFromLocalStorage @ tests.js:91
(anonymous) @ tests.js:5
tests.js:10 Uncaught Error: Task name not displayed correctly.
    at assert (tests.js:10:15)
    at tests.js:36:9
assert @ tests.js:10
(anonymous) @ tests.js:36
setTimeout
testAddAndDisplayTask @ tests.js:27
(anonymous) @ tests.js:3
tests.js:10 Uncaught Error: Task container should be empty after clearing tasks.
    at assert (tests.js:10:15)
    at tests.js:65:9
assert @ tests.js:10
(anonymous) @ tests.js:65
setTimeout
testClearTasks @ tests.js:63
(anonymous) @ tests.js:4"

9. 
